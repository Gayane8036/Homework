#include <iostream>
#include <unistd.h>
#include <sys/types.h>

int main() {
    int pipe1[2]; 
    int pipe2[2]; 
    if (pipe(pipe1) == -1 || pipe(pipe2) == -1)
    {
        std::cerr << "fail" << std::endl;
        return 1;
    }
    pid_t pid1, pid2;
    pid1 = fork();
    if (pid1 < 0)
    {
        std::cerr << "fail" << std::endl;
        return 1;
    }
    else if (pid1 == 0)
    {
        close(pipe1[0]);
        pid_t ownPID = getpid();
        write(pipe1[1], &ownPID, sizeof(ownPID)); 
        close(pipe1[1]);
        return 0;
    }
    else
    {
        pid2 = fork();
        if (pid2 < 0)
        {
            std::cerr << "fail" << std::endl;
            return 1;
        }
        else if (pid2 == 0)
        {
            close(pipe2[0]); 
            pid_t ownPID = getpid();
            write(pipe2[1], &ownPID, sizeof(ownPID));
            close(pipe2[1]);
            return 0;
        }
        else
        {
            close(pipe1[1]); 
            close(pipe2[1]);
            pid_t pid_from_child1, pid_from_child2;
            read(pipe1[0], &pid_from_child1, sizeof(pid_from_child1));
            read(pipe2[0], &pid_from_child2, sizeof(pid_from_child2));
            std::cout << "cnox " << getpid() << std::endl;
            std::cout << "arajnek " << pid_from_child1 << std::endl;
            std::cout << "mijnek " << pid_from_child2 << std::endl;
            close(pipe1[0]);
            close(pipe2[0]);
        }
    }
    return 0;
}
